{"version":3,"sources":["application/provider.js","youtube.js","utils/Searchbar.js","utils/VideoItem.js","utils/VideoList.js","utils/VideoDetail.js","App.js","reportWebVitals.js","index.js"],"names":["MyProvider","props","useState","q","videoSeleccion","state","setState","AppContext","Provider","value","children","createContext","Youtube","useContext","useEffect","axios","get","params","part","type","videoCaption","key","then","res","videos","data","items","console","log","Searchbar","txtBuscar","seTxtBuscar","Navbar","expand","variant","bg","Brand","href","Form","inline","onSubmit","txt","preventDefault","onChange","target","placeholder","className","Button","VideoItem","thumbs","title","number","Media","src","alt","onClick","Body","VideoList","i","map","e","id","videoId","snippet","thumbnails","default","url","VideoDetail","width","height","frameborder","allowFullScreen","App","Container","Row","Col","lg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.199ddda1.chunk.js","sourcesContent":["import { createContext, useState } from \"react\";\r\n\r\nconst MyProvider = (props) => {\r\n  const [state, setState] = useState({q:\"U2\",videoSeleccion: 0});  // inicializo el estado del objeto con una propiedad de b√∫squeda q pq sino toma undefined\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <AppContext.Provider value={[state, setState]}>\r\n        {props.children}\r\n      </AppContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n/* \r\nconst MyProviderTxt = (props) => {\r\n  const [q, setQ] = useState(\"Queen\");\r\n\r\n  return (\r\n    <div>\r\n      <AppContext.Provider value={[q, setQ]}>\r\n        {props.children}\r\n      </AppContext.Provider>\r\n    </div>\r\n  );\r\n}; */\r\nexport { MyProvider };\r\nexport const AppContext = createContext();\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { AppContext } from \"./application/provider\";\r\n\r\n\r\n/* const Hello = ({title})=><h2>{title}</h2>; */\r\n\r\nconst Youtube = () => {\r\n  const [state, setState] = useContext(AppContext);\r\n   \r\n  useEffect(() => {\r\n    /* alert('2111'); */\r\n     axios.get('https://www.googleapis.com/youtube/v3/search?', {\r\n                        params: {\r\n                          part: 'snippet',\r\n                          q: state.q,\r\n                          type: 'video',\r\n                          videoCaption: 'closedCaption',\r\n                          key: 'AIzaSyDMOjvlGL4hzC4lA9unPuvPJcMz-k7KOFs'\r\n                        }\r\n                      }\r\n/*         `https://www.googleapis.com/youtube/v3/search?part=snippet&q=Alex+Webb&type=video&videoCaption=closedCaption&key=AIzaSyDMOjvlGL4hzC4lA9unPuvPJcMz-k7KOFs`\r\n */    \r\n      ) \r\n      .then((res) => {\r\n        \r\n        setState({...state,videos: res.data.items});\r\n        /* console.log(res.data.items); */\r\n      });\r\n  }, [state.q]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      {console.log(state.q)}\r\n    \r\n     {/*  <VideoList videos={videoList} /> */}\r\n      {/*   <VideoDetail videos={videoList}/>  */}\r\n\r\n      {/* {videoList.map(e=><p>{e.etag}</p>)} */}\r\n      {/* <VideoList videos={videoList.map(e=>{\r\n                console.log(e.snippet.title)\r\n                return <p>{e.id.videoId}</p>})}></VideoList>*/}\r\n    </div>\r\n  );\r\n};\r\n/* export {Hello}; */\r\nexport { Youtube };\r\n","import React, { useState, useContext, Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button, Form, FormControl, Navbar } from \"react-bootstrap\";\r\nimport { Youtube } from \"../youtube\";\r\nimport { AppContext } from \"../application/provider\";\r\n\r\n\r\n\r\nconst Searchbar = () => {\r\n  const [state, setState] = useContext(AppContext);\r\n  const [txtBuscar, seTxtBuscar] = useState(\"\");\r\n  \r\n  const handleChange = (txt) => {\r\n    seTxtBuscar(txt.target.value);\r\n    console.log(txtBuscar);\r\n  };\r\n\r\n  const handleSubmit = (txt) => {\r\n   /*  alert(\"A name was submitted: \" + txtBuscar); */\r\n    console.log(txtBuscar);\r\n    setState({...state,q: txtBuscar});\r\n    txt.preventDefault();\r\n  };\r\n   \r\n  //SINO ACTUALIZA CADA VEZ LA APP Y RESETEA\r\n  /*   const handleSubmit = (txtBuscar) => {\r\n    //se puede borrar al pasar a funcional\r\n    console.log(\"el estado a buscar es este:\" + txtBuscar);\r\n    this.props.handleFormSubmit(txtBuscar);\r\n    /* txt.preventDefault(); */ /*   }; */\r\n\r\n  return (\r\n    <div>\r\n      <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\r\n        <Navbar.Brand href=\"#\">ReacTube</Navbar.Brand>\r\n\r\n        <Form inline onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={handleChange}\r\n            placeholder=\" \"\r\n            className=\"mr-sm-2\"\r\n          />\r\n\r\n          <Button variant=\"btn btn-outline-light\" type=\"submit\">\r\n            Search\r\n          </Button>\r\n        </Form>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Searchbar };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* \r\nclass Searchbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { txtBuscar: \"\" };\r\n  }\r\n \r\n  handleChange = (txt) => {\r\n    this.setState({ txtBuscar: txt.target.value });\r\n    console.log(this.state.txtBuscar);\r\n  };\r\n\r\n   handleSubmit = (txt) => {  //se puede borrar al pasar a funcional\r\n    console.log(\"el estado a buscar es este:\" + this.state.txtBuscar);\r\n    this.props.handleFormSubmit(this.state.txtBuscar);\r\n    txt.preventDefault(); //SINO ACTUALIZA CADA VEZ LA APP Y RESETEA\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\r\n          <Navbar.Brand href=\"#\">ReacTube</Navbar.Brand>\r\n\r\n          <Form inline onSubmit={this.handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.handleChange}\r\n              placeholder=\" \"\r\n              className=\"mr-sm-2\"/>\r\n            \r\n            <Button variant=\"btn btn-outline-light\"  type=\"submit\">Search</Button>\r\n          </Form>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Searchbar };\r\n */\r\n","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Media } from \"react-bootstrap\";\r\nimport { AppContext } from \"../application/provider\";\r\n\r\nconst VideoItem = ({thumbs, title, number}) => {\r\n  const [state, setState] = useContext(AppContext);\r\n  // definir valor de video seleccionado\r\n\r\n  const videoSeleccion = () => {\r\n    \r\n    setState({...state, videoSeleccion: number}); /* ASIGNO NUEVA PROPIEDAD AL ESTADO GLOBAL INDICA NUMERO DE VIDEO DE VIDEOLIST ACTIVO  */\r\n/*     alert(number);\r\n */   }\r\n  \r\n   \r\n  return (\r\n    <div>\r\n      <Media className=\"m-3\">\r\n              {/* <iframe src=\"https://www.youtube.com/embed/cWDJoK8zw58\" /> */} {/*SE REPRODUCE EN LISTADO LATERAL */}\r\n              <img src={thumbs} alt=\"youtube\" onClick={videoSeleccion} ></img>    {/* // MODIFICAR ESTADO GLOBAL DE VIDEO SELECCIONADO AL CLICKAR MINIATURA */}\r\n              <Media.Body className=\"m-3\">\r\n                <h6>{title}</h6>\r\n              </Media.Body>\r\n             \r\n            </Media>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { VideoItem };\r\n","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../application/provider\";\r\nimport { VideoItem } from \"./VideoItem\";\r\n\r\nconst VideoList = () => {\r\n  const [state] = useContext(AppContext);\r\n  let i=-1; \r\n\r\n  return (\r\n    <div>\r\n      {console.log(state)}\r\n      {state.videos && state.videos.map((e) => {\r\n          { console.log(e.id.videoId);}\r\n          {i=i+1}; /*  EN CADA PASADA DE MAP ASIGNO VARIABLE DE CONTROL E INCREMENTO +1 */\r\n          return (\r\n            <div key={e.id.videoId}>\r\n              <VideoItem thumbs={e.snippet.thumbnails.default.url} title={e.snippet.title} number={i}/>  {/* PASO POR PROPS LA POSICION EN EL ARRAY DE VIDEOS */}\r\n              \r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\nexport { VideoList };\r\n\r\n\r\n","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../application/provider\";\r\n\r\nconst VideoDetail = () => {\r\n  const [state] = useContext(AppContext);\r\n  const videoId= state.videos && state.videos[state.videoSeleccion].id.videoId;  /* RECUPERO VALOR ID DE VIDEO DE YOUTUBE PARA EMBEDERLO EN IFRAME */\r\n  /* alert(\"El estado es:\"+ state.videoSeleccion); */\r\n \r\n  const url='https://youtube.com/embed/'+ videoId;\r\n  console.log(url);\r\n\r\n  return (\r\n    <div>\r\n      {/*  <img src={state.videos && state.videos[3].snippet.thumbnails.high.url} alt=\"test\"></img>  */}\r\n       <iframe id=\"player\" type=\"text/html\" width=\"640\" height=\"360\" src= {url} frameborder=\"0\" allowFullScreen/>\r\n      <h5>{state.videos && state.videos[state.videoSeleccion].snippet.title}</h5> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport { VideoDetail };\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { MyProvider } from \"./application/provider\";\nimport { Searchbar } from \"./utils/Searchbar\";\nimport { VideoList } from \"./utils/VideoList.js\";\nimport { VideoDetail } from \"./utils/VideoDetail\";\nimport { Youtube } from \"./youtube\";\nimport { Hello } from \"./youtube\";\n\n/* const App = (_) => (\n  <MyProvider>\n    <Youtube />\n    <VideoList />\n    <VideoDetail /> \n  </MyProvider>\n); */\n\nfunction App() {\n\n\n/*   const handleSubmit=(txt)=>{ // METODO QUE RECUPERA POR PROPS EL VALOR QUE HA ENTRADO EL USUARIO. HAY QUE LLAMAR A LA BUSQUEDA AQUI\n    console.log(\"Texto a buscar pasado por props a APP es:\"+ txt); */\n   /*  } */\n  \n\n  return (\n    <div className=\"App\">\n      <MyProvider>\n     \n        <Youtube /* title='Sting' *//>\n        <Container>\n          <Row>\n            <Col lg={12}>\n              <Searchbar /* handleFormSubmit={handleSubmit} *//>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg={7}>\n             <VideoDetail /> \n            </Col>\n            <Col lg={5} className=\"mt-2\">\n              < VideoList />\n            </Col>\n          </Row>\n        </Container>\n        \n      </MyProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}